name: Azure CLI, PowerShell, Microsoft Graph
on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  Azure-CLI-Powershell:
    name: Azure CLI and PowerShell
    runs-on: ubuntu-latest
    steps:
      - name: Entra login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Azure CLI command
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show

      - name: Azure PowerShell command
        uses: azure/powershell@v2
        with:
          azPSVersion: "latest"
          inlineScript: |
            $ctx = Get-AzContext
            $maskedDomain = $ctx.Account.Id -replace '@.*', '@****'
            [PSCustomObject]@{
              SubscriptionName = $ctx.Subscription.Name
              SubscriptionId   = "****"
              Account          = $maskedDomain
              TenantId         = "****"
              Environment      = $ctx.Environment.Name
            } | Format-List

  Graph-PowerShell-Script:
    name: Microsoft Graph and PowerShell
    runs-on: ubuntu-latest
    steps:
      - name: Entra login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Install PowerShell modules
        shell: pwsh
        run: |
          Install-Module -Name Microsoft.Graph.Authentication -Scope CurrentUser -AllowClobber -Force
          Import-Module Microsoft.Graph.Authentication

      - name: Get Access Token
        shell: bash
        run: |
          ACCESS_TOKEN=$(az account get-access-token --resource https://graph.microsoft.com --query accessToken -o tsv)
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      # Example working with PowerShell / Graph on the runner directly in Yaml
      - name: Run PowerShell commands
        shell: pwsh
        env:
          ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
        run: |
          Write-Output "This is running from the Yaml"
          Connect-MgGraph -AccessToken $(ConvertTo-SecureString -String $($env:ACCESS_TOKEN) -AsPlainText -Force) -NoWelcome
          $ctx = Get-MgContext
          $maskedDomain = $ctx.Account -replace '@.*', '@****'
          [PSCustomObject]@{
            ClientId            = "****"
            TenantId            = "****"
            Scopes              = "****"
            AuthType            = $ctx.AuthType
            TokenCredentialType = $ctx.TokenCredentialType
            Account             = $maskedDomain
            AppName             = $ctx.AppName
            ContextScope        = $ctx.ContextScope
            PSHostVersion       = $ctx.PSHostVersion
            Environment         = $ctx.Environment
          } | Format-List

      - name: Checkout repository
        uses: actions/checkout@v4

      # Example working with PowerShell / Graph from a PowerShell script
      - name: Run PowerShell script
        shell: pwsh
        env:
          ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
        run: |
          .\scripts\custom-script.ps1 -AccessToken $env:ACCESS_TOKEN
